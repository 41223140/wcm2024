<h1>First</h1>
<h1>課程期中整理</h1>
<h2>網頁式內容管理</h2>
<p>網頁式內容管理（Web Content Management，WCM）是一種系統或工具，專門用於管理和控制網站上的數字內容。它提供了一個框架，讓用戶可以創建、編輯、發布和管理網站內容，不需要具備專業的編程技能。以下是WCM的一些主要功能和特點：</p>
<ul>
<li><strong>內容創建和編輯</strong>：WCM系統通常提供直觀的編輯工具，使非技術用戶也能輕鬆地創建和修改網頁內容。</li>
<li><strong>內容發布</strong>：它允許用戶將創建的內容發布到網站上，並設置發布計劃，以便內容在特定時間自動發布或撤回。</li>
<li><strong>版本控制</strong>：WCM系統能夠追踪內容的變更歷史，允許回滾到以前的版本，這對於內容審核和管理來說非常重要。</li>
<li><strong>用戶權限管理</strong>：它允許分配不同級別的用戶權限，確保只有授權人員可以創建、編輯或刪除內容。</li>
<li><strong>多語言支持</strong>：一些WCM系統提供多語言支持，使得在不同語言環境中管理和發布內容更加方便。</li>
<li><strong>工作流程管理</strong>：WCM系統通常包括工作流程功能，幫助組織內部協作和內容審批流程的管理。</li>
<li><strong>搜索引擎優化（SEO）工具</strong>：這些工具幫助優化網站內容，使其在搜索引擎結果中排名更高，從而吸引更多的流量。</li>
<li><strong>媒體管理</strong>：WCM系統可以管理各種數字資產，如圖像、視頻和文件，並使其容易集成到網站內容中。</li>
<li><strong>分析和報告</strong>：許多WCM系統提供內容性能分析工具，幫助用戶了解訪問者行為，從而改進網站內容和結構。</li>
<li><strong>跨平台發布</strong>：WCM系統通常支持多渠道發布，包括桌面網站、移動應用和社交媒體平台。</li>
</ul>
<h2>Python 程式系統</h2>
<p>Python 程式系統主要指的是使用 Python 程式語言來開發和運行應用程序的整個環境。這包括以下幾個主要組成部分：</p>
<ul>
<li><strong>Python 解釋器</strong>：Python 程式語言的核心，負責解釋和運行 Python 代碼。最常見的是 CPython，它是由 C 語言實現的 Python 版本，除此之外還有其他實現如 PyPy、Jython（Java 平台上的 Python）、IronPython（.NET 平台上的 Python）等。</li>
<li><strong>標準庫</strong>：Python 附帶了一個豐富的標準庫，提供了大量模塊和包來處理常見的任務，如文件 I/O、系統調用、網絡通信、數據操作等。標準庫使得 Python 用戶可以快速開發功能齊全的應用程序而不需要從零開始編寫所有功能。</li>
<li><strong>包管理工具</strong>：Python 有強大的包管理工具如 <code>pip</code>，允許用戶安裝和管理第三方模塊和包。這些第三方庫可以極大地擴展 Python 的功能，涵蓋了從網頁開發、數據科學到機器學習等各個領域。</li>
<li><strong>集成開發環境（IDE）</strong>：雖然你可以使用任何文本編輯器來編寫 Python 代碼，但專門的 IDE 可以提供代碼補全、調試、項目管理等功能，提升開發效率。常見的 Python IDE 包括 PyCharm、Visual Studio Code、Spyder 等。</li>
<li><strong>虛擬環境</strong>：為了管理不同項目的依賴關係，Python 提供了虛擬環境工具（如 <code>venv</code> 和 <code>virtualenv</code>），使得開發者可以在不同項目之間隔離包和模塊，避免依賴衝突。</li>
<li><strong>框架和工具</strong>：Python 有許多流行的框架和工具來加速開發特定類型的應用程序。例如，Django 和 Flask 是兩個流行的網頁框架，TensorFlow 和 PyTorch 是機器學習框架，Pandas 和 NumPy 是數據處理工具。</li>
</ul>
<p>總結來說，Python 程式系統是一個由 Python 解釋器、標準庫、包管理工具、開發環境、虛擬環境和各種專用框架和工具組成的完整生態系統。這個生態系統提供了強大的支持，使得開發者能夠高效地開發和運行各種應用程序。</p>
<h2>網頁上的 IDE</h2>
<p>網頁上的 IDE（集成開發環境）是指可以在網頁瀏覽器中使用的開發環境，提供編寫、調試和運行代碼的功能，而不需要在本地安裝任何軟件。這類 IDE 通常託管在雲端，讓開發者可以從任何有網絡連接的設備訪問和使用。以下是一些流行的網頁 IDE：</p>
<ul>
<li><strong>Repl.it</strong>：支持多種程式語言，包括 Python、JavaScript、Java 等。它提供即時編寫、運行和分享代碼的功能，並且有強大的協作工具。</li>
<li><strong>Glitch</strong>：主要針對網頁開發，支持 Node.js、Python 等。Glitch 提供了簡單的項目部署和即時編輯功能，適合快速原型設計和協作開發。</li>
<li><strong>JSFiddle</strong>：專注於前端開發，支持 HTML、CSS 和 JavaScript。它允許開發者在瀏覽器中編寫和運行前端代碼，並能夠快速分享工作成果。</li>
<li><strong>CodePen</strong>：主要針對前端開發，提供即時預覽 HTML、CSS 和 JavaScript 代碼的功能。CodePen 是前端開發者展示和分享他們作品的流行平台。</li>
<li><strong>Google Colab</strong>：專注於 Python 和數據科學，與 Jupyter Notebook 類似，但運行在雲端。它特別適合機器學習和數據分析，因為提供了免費的 GPU 支持。</li>
<li><strong>AWS Cloud9</strong>：由亞馬遜提供的完整雲端開發環境，支持多種程式語言和框架。它集成了 AWS 服務，適合需要雲端資源的開發者。</li>
<li><strong>Gitpod</strong>：與 GitHub 緊密集成，支持多種程式語言和開發環境。Gitpod 可以自動為每個 GitHub 項目創建開發環境，方便快速上手和協作。</li>
</ul>
<p>這些網頁上的 IDE 為開發者提供了靈活的開發環境，特別適合需要隨時隨地編寫代碼、快速原型設計和與團隊成員協作的情況。</p>
<h2>AI 工具</h2>
<div class="group/conversation-turn relative flex w-full min-w-0 flex-col agent-turn">
<div class="flex-col gap-1 md:gap-3">
<div class="flex flex-grow flex-col max-w-full">
<div class="min-h-[20px] text-message flex flex-col items-start whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 juice:w-full juice:items-end overflow-x-auto gap-2" data-message-author-role="assistant" data-message-id="97933e90-3c81-4582-9e07-c35784297930" dir="auto">
<div class="flex w-full flex-col gap-1 juice:empty:hidden juice:first:pt-[3px]">
<div class="markdown prose w-full break-words dark:prose-invert light">
<p>AI 工具是指利用人工智能技術來協助完成各種任務的軟件或平台。這些工具可以用於多個領域，包括自然語言處理、圖像識別、機器學習、數據分析、自動化等。以下是一些常見的 AI 工具及其應用領域：</p>
<p>自然語言處理（NLP）工具</p>
<ul>
<li><strong>GPT-3/GPT-4</strong>：由 OpenAI 開發的生成性預訓練變換模型，可以生成高質量的文本，應用於文本生成、翻譯、摘要、對話系統等。</li>
<li><strong>spaCy</strong>：一個快速且準確的 NLP 庫，提供了詞性標註、實體識別、依存句法分析等功能。</li>
<li><strong>NLTK（Natural Language Toolkit）</strong>：一個強大的 Python 庫，包含了處理和分析人類語言數據的工具。</li>
</ul>
</div>
</div>
</div>
</div>
</div>
</div>
<p>圖像和視頻處理工具</p>
<ul>
<li><strong>TensorFlow 和 Keras</strong>：由 Google 開發的機器學習框架，支持深度學習模型的構建和訓練，廣泛應用於圖像分類、對象檢測等領域。</li>
<li><strong>OpenCV</strong>：一個開源的計算機視覺庫，提供圖像和視頻處理的各種功能。</li>
<li><strong>PyTorch</strong>：由 Facebook 開發的深度學習框架，支持動態計算圖，適用於研究和生產環境。</li>
</ul>
<p>機器學習工具</p>
<ul>
<li><strong>scikit-learn</strong>：一個簡單且高效的 Python 庫，用於數據挖掘和數據分析，內置了許多分類、回歸、聚類算法。</li>
<li><strong>XGBoost</strong>：一個優化的分佈式梯度提升庫，具有高效、靈活的特點，常用於比賽和商業應用中。</li>
<li><strong>LightGBM</strong>：由微軟開發的梯度提升框架，針對大數據和高效能進行了優化。</li>
</ul>
<p>數據分析和視覺化分析</p>
<ul>
<li><strong>Tableau</strong>：一個強大的數據可視化工具，支持各種圖表和儀表板的創建，適用於商業分析。</li>
<li><strong>Power BI</strong>：由微軟提供的數據可視化和商業智能工具，與 Excel 和其他微軟產品集成良好。</li>
<li><strong>Matplotlib 和 Seaborn</strong>：Python 的數據視覺化庫，用於創建靜態、動畫和交互式可視化。</li>
</ul>
<p>自動化和機器人流程自動化（RPA）工具</p>
<ul>
<li><strong>UiPath</strong>：一個領先的 RPA 平台，幫助企業自動化日常業務流程，提升效率。</li>
<li><strong>Automation Anywhere</strong>：提供端到端的自動化解決方案，適用於各種業務流程的自動化。</li>
<li><strong>Blue Prism</strong>：一個強大的 RPA 工具，幫助企業建立數字化員工以自動化任務。</li>
</ul>
<p>聊天機器人和對話系統工具</p>
<ul>
<li><strong>Dialogflow</strong>：由 Google 開發的對話設計平台，用於構建自然語言理解和對話系統。</li>
<li><strong>Microsoft Bot Framework</strong>：一個用於構建和部署聊天機器人的框架，支持多種平台和語言。</li>
<li><strong>Rasa</strong>：一個開源的對話管理框架，提供了自定義的 NLP 和對話管理功能。</li>
</ul>
<p>這些 AI 工具極大地提升了各個領域的生產力和創新能力，幫助開發者和企業快速實現智能化應用。</p>
<h1>課表</h1>
<p><img alt="" height="400" src="/images/螢幕擷取畫面 2024-05-16 130010.png" width="578"/></p>
<h1>W6</h1>
<p>將下面題目解答並放入自己的網站上</p>
<p>1.根據您的專業, 就 git 的使用, 從與 ChatGPT 的對話, 將內容整理到個人的第六網誌, 其中包含: git 的發展歷史, 創作人的相關履歷, 以及一般相同專業人士如何利用  git 解決內容管理問題?</p>
<p>2.<span><span class="ui-provider sy vy vz wa wb wc wd we wf wg wh wi wj wk wl wm wn wo wp wq wr ws wt wu wv ww wx wy wz xa xb xc xd xe xf" dir="ltr">假如要在 Windows 實際 demo git client 與 git server, 該如何進行? 請將相關操作流程整理至個人第六週網誌中.</span></span></p>
<h2>Git的發展歷史</h2>
<p>起源與創建 (2005)</p>
<ul>
<li><strong>背景</strong>: Linus Torvalds 在使用 BitKeeper（另一個版本控制系統）多年後，由於 BitKeeper 改變了其免費使用政策，Linux 社區決定開發自己的工具。</li>
<li><strong>目標</strong>: Torvalds 設定了四個主要目標：速度、簡單的設計、對非線性開發（成千上萬的並行分支）的強大支持，以及分佈式運行的能力。</li>
<li><strong>2005年4月</strong>: Linus Torvalds 開始著手開發 Git。</li>
<li><strong>2005年4月7日</strong>: Git 的首次提交。</li>
<li><strong>2005年4月29日</strong>: Git 被用來管理 Linux 核心的開發。</li>
</ul>
<p>早期發展 (2005-2007)</p>
<ul>
<li><strong>2005年6月</strong>: Git 0.99 發布，開始為更多用戶所接受。</li>
<li><strong>2005年12月</strong>: Git 1.0 發布。</li>
<li><strong>2006年</strong>: Junio Hamano 成為 Git 的主要維護者。他的貢獻和持續的改進使 Git 更加穩定和強大。</li>
<li><strong>2007年</strong>: GitHub 啟動，成為 Git 的一個託管平台，極大地促進了 Git 的普及。</li>
</ul>
<p>成長與普及 (2008-2014)</p>
<ul>
<li><strong>2008年</strong>: Git 1.5.0 發布，改進了用戶界面並添加了許多新功能。</li>
<li><strong>2009年</strong>: Git 1.6.0 發布，進一步優化了性能和功能。</li>
<li><strong>2010年</strong>: 隨著 GitHub 和 Bitbucket 等平台的流行，Git 在開源社區和商業領域的應用日益增多。</li>
<li><strong>2012年</strong>: Git 1.7.10 發布，加入了許多新特性和改進。</li>
<li><strong>2013年</strong>: Git 1.8.0 發布，強化了用戶體驗和性能。</li>
<li><strong>2014年</strong>: Git 2.0.0 發布，進一步鞏固了其在版本控制系統中的地位。</li>
</ul>
<p>持續發展 (2015-至今)</p>
<ul>
<li><strong>2015年</strong>: Git 2.5.0 發布，添加了許多現代化功能。</li>
<li><strong>2016年</strong>: Git 2.9.0 發布，持續改進了分支管理和性能。</li>
<li><strong>2018年</strong>: Git 2.19.0 發布，引入了新的底層性能改進。</li>
<li><strong>2020年</strong>: Git 2.27.0 發布，改進了用戶界面和安全性。</li>
<li><strong>2021年</strong>: Git 2.33.0 發布，增加了許多新特性和優化。</li>
</ul>
<p>重要里程碑</p>
<ul>
<li><strong>開源社區的支持</strong>: Git 由開源社區共同維護和改進，得到了廣泛的支持和貢獻。</li>
<li><strong>工具和平台</strong>: 除了 GitHub 和 Bitbucket，還有 GitLab 等平台的出現，使得 Git 的使用更加便捷。</li>
<li><strong>廣泛應用</strong>: 從小型開發團隊到大型企業，Git 已成為版本控制的標準。</li>
</ul>
<p>影響和未來</p>
<ul>
<li><strong>分散式版本控制</strong>: Git 的成功推動了分散式版本控制系統的普及，改變了軟件開發的工作流程。</li>
<li><strong>持續發展</strong>: 隨著社區的持續投入，Git 將不斷演變和改進，以適應現代開發的需求。</li>
</ul>
<p>Git 的歷史展示了開源軟件的力量和社區合作的重要性，這些都使得 Git 成為今天最流行的版本控制系統之一。</p>
<h2><span><span class="ui-provider lg bco bcp bcq bcr bcs bct bcu bcv bcw bcx bcy bcz bda bdb bdc bdd bde bdf bdg bdh bdi bdj bdk bdl bdm bdn bdo bdp bdq bdr bds bdt bdu bdv" dir="ltr">Git創作人的相關履歷</span></span></h2>
<p>Git 的創始人是 Linus Torvalds，他是一位著名的軟件工程師和程序員，以創建 Linux 操作系統核心（Linux kernel）而聞名。以下是 Linus Torvalds 的詳細履歷：</p>
<p>早年生活與教育</p>
<ul>
<li><strong>出生</strong>: Linus Torvalds 於 1969 年 12 月 28 日出生於芬蘭赫爾辛基。</li>
<li><strong>家庭背景</strong>: Torvalds 家族中有許多成員都是記者和作家，父親是 Nils Torvalds，母親是 Anna Torvalds。</li>
<li><strong>教育</strong>: Linus 就讀於赫爾辛基大學，主修計算機科學。他在學習期間對操作系統和編程語言產生了濃厚的興趣。</li>
<li>職業生涯與成就</li>
</ul>
<h4>Linux 核心</h4>
<ul>
<li><strong>1991年</strong>: 在赫爾辛基大學的學習期間，Linus 開始編寫一個新的操作系統內核，這就是後來的 Linux 核心。</li>
<li><strong>1991年8月25日</strong>: 他在 comp.os.minix 郵件列表中宣布了這個項目，並邀請其他開發者參與。</li>
<li><strong>1994年</strong>: 發布了第一個穩定版本的 Linux 核心（版本 1.0），這個開源項目迅速得到了全球開發者的支持和貢獻。</li>
<li><strong>後續發展</strong>: Linux 核心成為了眾多操作系統（如 Ubuntu、Debian、Fedora 等）的基礎，廣泛應用於服務器、桌面電腦和嵌入式系統中。</li>
</ul>
<p>Git</p>
<ul>
<li><strong>2005年</strong>: 由於 BitKeeper 的免費使用政策改變，Linus 開始著手開發一個新的版本控制系統，Git。</li>
<li><strong>2005年4月7日</strong>: Git 的首次提交。</li>
<li><strong>2005年4月29日</strong>: Git 被用來管理 Linux 核心的開發，迅速成為開源社區和商業軟件開發中的主要工具。</li>
<li>其他貢獻</li>
<li><strong>Subsurface</strong>: Linus Torvalds 也是一個用於記錄和計劃潛水的開源軟件 Subsurface 的開發者。</li>
<li><strong>Tux</strong>: 他設計了 Linux 的吉祥物，一隻名叫 Tux 的企鵝。</li>
</ul>
<p>獎項與榮譽</p>
<ul>
<li><strong>1998年</strong>: EFF Pioneer Award。</li>
<li><strong>2000年</strong>: Lovelace Medal。</li>
<li><strong>2008年</strong>: ACM 計算機先鋒獎（ACM Software System Award）。</li>
<li><strong>2012年</strong>: Millenium Technology Prize（與 Shinya Yamanaka 共同獲得）。</li>
</ul>
<p>影響力</p>
<p>Linus Torvalds 被廣泛認為是開源軟件運動的先驅之一。他的工作不僅影響了操作系統和版本控制系統的發展，也推動了開源社區的成長和技術創新。Linux 核心和 Git 現在都是全球數百萬開發者的日常工具，對技術世界產生了深遠的影響。</p>
<p>個人生活</p>
<p>Linus 目前定居於美國，已婚並有三個女兒。他的個人興趣包括潛水和旅行。</p>
<p>Linus Torvalds 的職業生涯展示了個人對技術的熱情如何能夠轉化為對整個行業和社會的重大貢獻。無論是 Linux 還是 Git，這些工具都深刻地改變了我們開發和使用軟件的方式。</p>
<h2><span><span class="ui-provider lg bco bcp bcq bcr bcs bct bcu bcv bcw bcx bcy bcz bda bdb bdc bdd bde bdf bdg bdh bdi bdj bdk bdl bdm bdn bdo bdp bdq bdr bds bdt bdu bdv" dir="ltr">要在 Windows 實際 demo git client 與 git server, 該如何進行</span></span></h2>
<p>在 Windows 上進行 Git client 和 Git server 的實際演示，您可以遵循以下步驟。這些步驟將帶您從安裝 Git 到設置本地和遠程存儲庫，以及進行基本的 Git 操作。</p>
<p>安裝 Git</p>
<ol>
<li><strong>下載 Git</strong>: 前往 <a href="https://git-scm.com/" rel="noreferrer" target="_new">Git 官網</a> 下載適用於 Windows 的 Git 安裝包。</li>
<li><strong>安裝 Git</strong>: 運行下載的安裝程序，按照默認設置完成安裝。這將安裝 Git Bash 和 Git GUI 兩個工具。</li>
</ol>
<p>設置 Git 客戶端</p>
<ol>
<li><strong>配置 Git</strong>:
<ul>
<li>打開 Git Bash。</li>
<li>輸入以下指令設置您的用戶名和電子郵件:
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"
</pre>
<p></p>
</li>
</ul>
</li>
</ol>
<p>設置git伺服器</p>
<p>有多種方式可以在 Windows 上設置 Git 服務器，這裡使用 <a href="https://gitforwindows.org/" rel="noreferrer" target="_new">Git for Windows</a> 和 <a href="https://about.gitlab.com/install/#windows" rel="noreferrer" target="_new">GitLab</a> 或 <a rel="noreferrer" target="_new">Gitea</a> 作為示例。</p>
<h4>使用 Gitea 設置 Git 服務器</h4>
<p>Gitea 是一個輕量級的 Git 服務器，適合在 Windows 上快速設置。</p>
<ol>
<li>
<p><strong>下載 Gitea</strong>:</p>
<ul>
<li>前往 <a rel="noreferrer" target="_new">Gitea 官網</a> 下載適用於 Windows 的二進制文件。</li>
</ul>
</li>
<li>
<p><strong>安裝並運行 Gitea</strong>:</p>
<ul>
<li>將下載的二進制文件放在一個目錄中（例如 <code>C:\Gitea</code>）。</li>
<li>打開命令提示符，導航到該目錄並運行:
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">gitea web
</pre>
</li>
</ul>
</li>
<li>
<p><strong>配置 Gitea</strong>:</p>
<ul>
<li>打開瀏覽器，導航到 <code>http://localhost:3000</code>，按照屏幕上的指示完成設置。</li>
<li>創建一個新用戶並登錄。</li>
</ul>
</li>
</ol>
<p>建立遠程存儲庫</p>
<ol>
<li><strong>在 Gitea 中創建存儲庫</strong>:
<ul>
<li>登錄到 Gitea 網頁界面。</li>
<li>點擊 "New Repository"，創建一個新的存儲庫（例如 <code>demo-repo</code>）。</li>
</ul>
</li>
</ol>
<p>設置本地存儲庫並連接到遠程存儲庫</p>
<ol>
<li>
<p><strong>創建本地存儲庫</strong>:</p>
<ul>
<li>打開 Git Bash。</li>
<li>創建一個新的目錄並初始化 Git:
<div class="dark bg-gray-950 rounded-md border-[0.5px] border-token-border-medium">
<div class="flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md"><span></span></div>
</div>
</li>
</ul>
</li>
<li>
<p><strong>連接到遠程存儲庫</strong>:</p>
<ul>
<li>添加遠程存儲庫（替換 <code>&lt;username&gt;</code> 和 <code>&lt;hostname&gt;</code> 為您的 Gitea 用戶名和主機名）:
<div class="dark bg-gray-950 rounded-md border-[0.5px] border-token-border-medium">
<div class="flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md"><span></span></div>
<div class="overflow-y-auto p-4" dir="ltr">
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">git remote add origin http://localhost:3000/&lt;username&gt;/demo-repo.git
</pre>
</div>
</div>
</li>
</ul>
</li>
</ol>
<p>執行基本的 Git 操作</p>
<ol>
<li>
<p><strong>添加文件並提交</strong>:</p>
<ul>
<li>創建一個文件:
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">echo "# Demo Repository" &gt; README.md
</pre>
<br/>
<div class="dark bg-gray-950 rounded-md border-[0.5px] border-token-border-medium">
<div class="flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md"><span></span></div>
</div>
</li>
<li>添加文件到 Git:
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">git add README.md
</pre>
<br/>
<div class="dark bg-gray-950 rounded-md border-[0.5px] border-token-border-medium">
<div class="flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md"></div>
<div class="flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md">提交更改:
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">git commit -m "Initial commit"
</pre>
<br/><br/><br/></div>
</div>
<div class="dark bg-gray-950 rounded-md border-[0.5px] border-token-border-medium">
<div class="flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md"><span></span></div>
</div>
</li>
</ul>
</li>
<li>
<p><strong>推送到遠程存儲庫</strong>:</p>
<ul>
<li>推送更改到 Gitea 服務器上的遠程存儲庫:
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">git push -u origin master
</pre>
<br/>
<div class="dark bg-gray-950 rounded-md border-[0.5px] border-token-border-medium">
<div class="flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md"><span></span></div>
</div>
</li>
</ul>
</li>
</ol>
<p>簡單演示的完成</p>
<p>這樣，您已經在 Windows 上設置並運行了 Git 客戶端和服務器，並進行了基本的 Git 操作。這個設置可以用來進一步演示 Git 的其他功能，如分支、合併、衝突解決等。</p>
<h1>About</h1>
<p>網頁: 請填入目前網站所在的 URL, <a class="Link--inTextBlock" href="https://41223140.github.io/wcm2024/">https://41223140.github.io/wcm2024/</a></p>
<p>網誌: 請填入目前網站所在的 URL/blog, <a class="Link--inTextBlock" href="https://41223140.github.io/wcm2024/">https://41223140.github.io/wcm2024/<span>blog</span></a></p>
<p>簡報: 請填入目前網站所在的 URL/reveal, <a class="Link--inTextBlock" href="https://41223140.github.io/wcm2024/">https://41223140.github.io/wcm2024/<span>reveal</span></a></p>
<p>倉儲: 請填入目前網站所對應的 Github 倉儲連結</p>
<p>本 cmsimde 網際內容管理系統的對應 Template 倉儲:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a></p>
<p style="padding-left: 30px;">此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改</p>
<p style="padding-left: 30px;">倉儲對應網站: <a href="https://mde.tw/cmsimde_site">https://mde.tw/cmsimde_site</a></p>
<h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<p></p>
<h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<div style="width: 100%; height: 100%;"></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>