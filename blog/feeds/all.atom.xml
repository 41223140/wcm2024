<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>網際內容管理系統</title><link href="./" rel="alternate"></link><link href="./feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2024-06-17T14:00:19+08:00</updated><entry><title>2024 W11課程整理</title><link href="./2024-Spring-w11-blog-tutorial.html" rel="alternate"></link><published>2024-05-03T11:00:00+08:00</published><updated>2024-06-17T14:00:19+08:00</updated><author><name>41223140</name></author><id>tag:None,2024-05-03:./2024-Spring-w11-blog-tutorial.html</id><summary type="html">&lt;p&gt;如何在網頁中加入 Brython 程式應用&lt;/p&gt;
</summary><content type="html">&lt;p&gt;如何在網頁中加入 Brython 程式應用&lt;/p&gt;


&lt;h1&gt;branch&lt;/h1&gt;
&lt;p&gt;所有學員需將分組的小組組別名稱(g4)新增至評分網站中的，為置於專案目錄下，之後將每位學員的關於本課程內容心得，新增至各組別下的目錄。&lt;/p&gt;
&lt;p&gt;這個過程中的困難點就是當多人在同時上傳(push)時，我們要如何應對。&lt;/p&gt;
&lt;p&gt;這裡就是需要利用分支處理衝突問題，雖然在上傳時如果當下自己的版本不是最新的，一樣需要將最新的版本git pull下來，然後進入動態網站進行衝突/合併，解決完後才能夠git push上去。&lt;/p&gt;
&lt;p&gt;分支：就是在當下的版本的另一條屬於自己的版本，比如說是原本一條的河流，突然變成兩條(甚至以上)，他們在本質上是屬於同一支源流，但每個分支出來會呈現的形式都是不同，最終都會匯聚至大海，而大海就是我們衝突裡的主流，每個人在自己的分支裡做自己想做的，最後要統整合併為一個主流，將每次上傳時都可能遇到的處理衝突問題次數降低。&lt;/p&gt;</content><category term="w11"></category><category term="網誌編寫"></category></entry><entry><title>2024 W10課程整理</title><link href="./2024-Spring-w10-blog-tutorial.html" rel="alternate"></link><published>2024-04-26T11:00:00+08:00</published><updated>2024-06-17T07:45:22+08:00</updated><author><name>41223140</name></author><id>tag:None,2024-04-26:./2024-Spring-w10-blog-tutorial.html</id><summary type="html">&lt;p&gt;replit維護新的分組倉儲&lt;/p&gt;
</summary><content type="html">&lt;p&gt;replit維護新的分組倉儲&lt;/p&gt;


&lt;h1&gt;replit維護新的分組倉儲&lt;/h1&gt;
&lt;p&gt;以replit來維護新的分組倉儲，需要應對問題為replit的.shh協定無法供免費使用者使用，已經透過github系統設定，現在可以直接在replit進行分組維護，&lt;/p&gt;
&lt;p&gt;replit目前只剩下對於使用者的總資料儲存量(10G)限制，當資源存取超過上限時，需要回到github下的對應倉儲帳號進行對應手段。&lt;/p&gt;
&lt;p&gt;新的分組專案網站：https://github.com/mdewcm2024/1astud-site&lt;/p&gt;
&lt;p&gt;(需在teams留言字串進行加入)&lt;/p&gt;</content><category term="w10"></category><category term="網誌編寫"></category></entry><entry><title>2024 期中課程整理</title><link href="./2024-Spring-w9-blog-tutorial.html" rel="alternate"></link><published>2024-04-19T11:00:00+08:00</published><updated>2024-06-17T07:42:56+08:00</updated><author><name>41223140</name></author><id>tag:None,2024-04-19:./2024-Spring-w9-blog-tutorial.html</id><summary type="html">&lt;p&gt;期中課程整理&lt;/p&gt;
</summary><content type="html">&lt;p&gt;期中課程整理&lt;/p&gt;


&lt;h1&gt;網頁式內容管理&lt;/h1&gt;
&lt;p&gt;網頁式內容管理（Web Content Management，WCM）是一種系統或工具，專門用於管理和控制網站上的數字內容。它提供了一個框架，讓用戶可以創建、編輯、發布和管理網站內容，不需要具備專業的編程技能。以下是WCM的一些主要功能和特點：&lt;/p&gt;
&lt;p&gt;內容創建和編輯：WCM系統通常提供直觀的編輯工具，使非技術用戶也能輕鬆地創建和修改網頁內容。
內容發布：它允許用戶將創建的內容發布到網站上，並設置發布計劃，以便內容在特定時間自動發布或撤回。
版本控制：WCM系統能夠追踪內容的變更歷史，允許回滾到以前的版本，這對於內容審核和管理來說非常重要。
用戶權限管理：它允許分配不同級別的用戶權限，確保只有授權人員可以創建、編輯或刪除內容。
多語言支持：一些WCM系統提供多語言支持，使得在不同語言環境中管理和發布內容更加方便。
工作流程管理：WCM系統通常包括工作流程功能，幫助組織內部協作和內容審批流程的管理。
搜索引擎優化（SEO）工具：這些工具幫助優化網站內容，使其在搜索引擎結果中排名更高，從而吸引更多的流量。
媒體管理：WCM系統可以管理各種數字資產，如圖像、視頻和文件，並使其容易集成到網站內容中。
分析和報告：許多WCM系統提供內容性能分析工具，幫助用戶了解訪問者行為，從而改進網站內容和結構。
跨平台發布：WCM系統通常支持多渠道發布，包括桌面網站、移動應用和社交媒體平台。&lt;/p&gt;
&lt;h1&gt;Python 程式系統&lt;/h1&gt;
&lt;p&gt;Python 程式系統主要指的是使用 Python 程式語言來開發和運行應用程序的整個環境。這包括以下幾個主要組成部分：&lt;/p&gt;
&lt;p&gt;Python 解釋器：Python 程式語言的核心，負責解釋和運行 Python 代碼。最常見的是 CPython，它是由 C 語言實現的 Python 版本，除此之外還有其他實現如 PyPy、Jython（Java 平台上的 Python）、IronPython（.NET 平台上的 Python）等。
標準庫：Python 附帶了一個豐富的標準庫，提供了大量模塊和包來處理常見的任務，如文件 I/O、系統調用、網絡通信、數據操作等。標準庫使得 Python 用戶可以快速開發功能齊全的應用程序而不需要從零開始編寫所有功能。
包管理工具：Python 有強大的包管理工具如 pip，允許用戶安裝和管理第三方模塊和包。這些第三方庫可以極大地擴展 Python 的功能，涵蓋了從網頁開發、數據科學到機器學習等各個領域。
集成開發環境（IDE）：雖然你可以使用任何文本編輯器來編寫 Python 代碼，但專門的 IDE 可以提供代碼補全、調試、項目管理等功能，提升開發效率。常見的 Python IDE 包括 PyCharm、Visual Studio Code、Spyder 等。
虛擬環境：為了管理不同項目的依賴關係，Python 提供了虛擬環境工具（如 venv 和 virtualenv），使得開發者可以在不同項目之間隔離包和模塊，避免依賴衝突。
框架和工具：Python 有許多流行的框架和工具來加速開發特定類型的應用程序。例如，Django 和 Flask 是兩個流行的網頁框架，TensorFlow 和 PyTorch 是機器學習框架，Pandas 和 NumPy 是數據處理工具。
總結來說，Python 程式系統是一個由 Python 解釋器、標準庫、包管理工具、開發環境、虛擬環境和各種專用框架和工具組成的完整生態系統。這個生態系統提供了強大的支持，使得開發者能夠高效地開發和運行各種應用程序。&lt;/p&gt;
&lt;h1&gt;網頁上的 IDE&lt;/h1&gt;
&lt;p&gt;網頁上的 IDE（集成開發環境）是指可以在網頁瀏覽器中使用的開發環境，提供編寫、調試和運行代碼的功能，而不需要在本地安裝任何軟件。這類 IDE 通常託管在雲端，讓開發者可以從任何有網絡連接的設備訪問和使用。以下是一些流行的網頁 IDE：&lt;/p&gt;
&lt;p&gt;Repl.it：支持多種程式語言，包括 Python、JavaScript、Java 等。它提供即時編寫、運行和分享代碼的功能，並且有強大的協作工具。
Glitch：主要針對網頁開發，支持 Node.js、Python 等。Glitch 提供了簡單的項目部署和即時編輯功能，適合快速原型設計和協作開發。
JSFiddle：專注於前端開發，支持 HTML、CSS 和 JavaScript。它允許開發者在瀏覽器中編寫和運行前端代碼，並能夠快速分享工作成果。
CodePen：主要針對前端開發，提供即時預覽 HTML、CSS 和 JavaScript 代碼的功能。CodePen 是前端開發者展示和分享他們作品的流行平台。
Google Colab：專注於 Python 和數據科學，與 Jupyter Notebook 類似，但運行在雲端。它特別適合機器學習和數據分析，因為提供了免費的 GPU 支持。
AWS Cloud9：由亞馬遜提供的完整雲端開發環境，支持多種程式語言和框架。它集成了 AWS 服務，適合需要雲端資源的開發者。
Gitpod：與 GitHub 緊密集成，支持多種程式語言和開發環境。Gitpod 可以自動為每個 GitHub 項目創建開發環境，方便快速上手和協作。
這些網頁上的 IDE 為開發者提供了靈活的開發環境，特別適合需要隨時隨地編寫代碼、快速原型設計和與團隊成員協作的情況。&lt;/p&gt;
&lt;h1&gt;AI 工具&lt;/h1&gt;
&lt;p&gt;AI 工具是指利用人工智能技術來協助完成各種任務的軟件或平台。這些工具可以用於多個領域，包括自然語言處理、圖像識別、機器學習、數據分析、自動化等。以下是一些常見的 AI 工具及其應用領域：&lt;/p&gt;
&lt;p&gt;自然語言處理（NLP）工具&lt;/p&gt;
&lt;p&gt;GPT-3/GPT-4：由 OpenAI 開發的生成性預訓練變換模型，可以生成高質量的文本，應用於文本生成、翻譯、摘要、對話系統等。
spaCy：一個快速且準確的 NLP 庫，提供了詞性標註、實體識別、依存句法分析等功能。
NLTK（Natural Language Toolkit）：一個強大的 Python 庫，包含了處理和分析人類語言數據的工具。
圖像和視頻處理工具&lt;/p&gt;
&lt;p&gt;TensorFlow 和 Keras：由 Google 開發的機器學習框架，支持深度學習模型的構建和訓練，廣泛應用於圖像分類、對象檢測等領域。
OpenCV：一個開源的計算機視覺庫，提供圖像和視頻處理的各種功能。
PyTorch：由 Facebook 開發的深度學習框架，支持動態計算圖，適用於研究和生產環境。
機器學習工具&lt;/p&gt;
&lt;p&gt;scikit-learn：一個簡單且高效的 Python 庫，用於數據挖掘和數據分析，內置了許多分類、回歸、聚類算法。
XGBoost：一個優化的分佈式梯度提升庫，具有高效、靈活的特點，常用於比賽和商業應用中。
LightGBM：由微軟開發的梯度提升框架，針對大數據和高效能進行了優化。
數據分析和視覺化分析&lt;/p&gt;
&lt;p&gt;Tableau：一個強大的數據可視化工具，支持各種圖表和儀表板的創建，適用於商業分析。
Power BI：由微軟提供的數據可視化和商業智能工具，與 Excel 和其他微軟產品集成良好。
Matplotlib 和 Seaborn：Python 的數據視覺化庫，用於創建靜態、動畫和交互式可視化。
自動化和機器人流程自動化（RPA）工具&lt;/p&gt;
&lt;p&gt;UiPath：一個領先的 RPA 平台，幫助企業自動化日常業務流程，提升效率。
Automation Anywhere：提供端到端的自動化解決方案，適用於各種業務流程的自動化。
Blue Prism：一個強大的 RPA 工具，幫助企業建立數字化員工以自動化任務。
聊天機器人和對話系統工具&lt;/p&gt;
&lt;p&gt;Dialogflow：由 Google 開發的對話設計平台，用於構建自然語言理解和對話系統。
Microsoft Bot Framework：一個用於構建和部署聊天機器人的框架，支持多種平台和語言。
Rasa：一個開源的對話管理框架，提供了自定義的 NLP 和對話管理功能。
這些 AI 工具極大地提升了各個領域的生產力和創新能力，幫助開發者和企業快速實現智能化應用。&lt;/p&gt;</content><category term="w9"></category><category term="網誌編寫"></category></entry><entry><title>2024 W8課程整理</title><link href="./2024-Spring-w8-blog-tutorial.html" rel="alternate"></link><published>2024-04-12T11:00:00+08:00</published><updated>2024-06-17T07:19:56+08:00</updated><author><name>41223140</name></author><id>tag:None,2024-04-12:./2024-Spring-w8-blog-tutorial.html</id><summary type="html">&lt;p&gt;從教育的本質看課程內容、如何將影片嵌入網頁&lt;/p&gt;
</summary><content type="html">&lt;p&gt;從教育的本質看課程內容、如何將影片嵌入網頁&lt;/p&gt;


&lt;h1&gt;教育本質&lt;/h1&gt;
&lt;h1&gt;如何將影片嵌入進自己網站&lt;/h1&gt;</content><category term="w8"></category><category term="網誌編寫"></category></entry><entry><title>2024 W6課程整理</title><link href="./2024-Spring-w6-blog-tutorial.html" rel="alternate"></link><published>2024-03-29T11:00:00+08:00</published><updated>2024-06-15T19:47:07+08:00</updated><author><name>41223140</name></author><id>tag:None,2024-03-29:./2024-Spring-w6-blog-tutorial.html</id><summary type="html">&lt;p&gt;透過與 ChatGPT 的對話,了解有關 git 在不同專業領域的應用方法.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;透過與 ChatGPT 的對話,了解有關 git 在不同專業領域的應用方法.&lt;/p&gt;


&lt;h1&gt;詢問ChatGPT有關Git 歷史與希望解決的問題&lt;/h1&gt;
&lt;h2&gt;問題:Git的發展歷史&lt;/h2&gt;
&lt;p&gt;起源與創建 (2005)&lt;/p&gt;
&lt;p&gt;背景: Linus Torvalds 在使用 BitKeeper（另一個版本控制系統）多年後，由於 BitKeeper 改變了其免費使用政策，Linux 社區決定開發自己的工具。
目標: Torvalds 設定了四個主要目標：速度、簡單的設計、對非線性開發（成千上萬的並行分支）的強大支持，以及分佈式運行的能力。
2005年4月: Linus Torvalds 開始著手開發 Git。
2005年4月7日: Git 的首次提交。
2005年4月29日: Git 被用來管理 Linux 核心的開發。
早期發展 (2005-2007)&lt;/p&gt;
&lt;p&gt;2005年6月: Git 0.99 發布，開始為更多用戶所接受。
2005年12月: Git 1.0 發布。
2006年: Junio Hamano 成為 Git 的主要維護者。他的貢獻和持續的改進使 Git 更加穩定和強大。
2007年: GitHub 啟動，成為 Git 的一個託管平台，極大地促進了 Git 的普及。
成長與普及 (2008-2014)&lt;/p&gt;
&lt;p&gt;2008年: Git 1.5.0 發布，改進了用戶界面並添加了許多新功能。
2009年: Git 1.6.0 發布，進一步優化了性能和功能。
2010年: 隨著 GitHub 和 Bitbucket 等平台的流行，Git 在開源社區和商業領域的應用日益增多。
2012年: Git 1.7.10 發布，加入了許多新特性和改進。
2013年: Git 1.8.0 發布，強化了用戶體驗和性能。
2014年: Git 2.0.0 發布，進一步鞏固了其在版本控制系統中的地位。
持續發展 (2015-至今)&lt;/p&gt;
&lt;p&gt;2015年: Git 2.5.0 發布，添加了許多現代化功能。
2016年: Git 2.9.0 發布，持續改進了分支管理和性能。
2018年: Git 2.19.0 發布，引入了新的底層性能改進。
2020年: Git 2.27.0 發布，改進了用戶界面和安全性。
2021年: Git 2.33.0 發布，增加了許多新特性和優化。
重要里程碑&lt;/p&gt;
&lt;p&gt;開源社區的支持: Git 由開源社區共同維護和改進，得到了廣泛的支持和貢獻。
工具和平台: 除了 GitHub 和 Bitbucket，還有 GitLab 等平台的出現，使得 Git 的使用更加便捷。
廣泛應用: 從小型開發團隊到大型企業，Git 已成為版本控制的標準。
影響和未來&lt;/p&gt;
&lt;p&gt;分散式版本控制: Git 的成功推動了分散式版本控制系統的普及，改變了軟件開發的工作流程。
持續發展: 隨著社區的持續投入，Git 將不斷演變和改進，以適應現代開發的需求。
Git 的歷史展示了開源軟件的力量和社區合作的重要性，這些都使得 Git 成為今天最流行的版本控制系統之一。&lt;/p&gt;
&lt;h2&gt;Git創作人的相關履歷&lt;/h2&gt;
&lt;p&gt;Git 的創始人是 Linus Torvalds，他是一位著名的軟件工程師和程序員，以創建 Linux 操作系統核心（Linux kernel）而聞名。以下是 Linus Torvalds 的詳細履歷：&lt;/p&gt;
&lt;p&gt;早年生活與教育&lt;/p&gt;
&lt;p&gt;出生: Linus Torvalds 於 1969 年 12 月 28 日出生於芬蘭赫爾辛基。
家庭背景: Torvalds 家族中有許多成員都是記者和作家，父親是 Nils Torvalds，母親是 Anna Torvalds。
教育: Linus 就讀於赫爾辛基大學，主修計算機科學。他在學習期間對操作系統和編程語言產生了濃厚的興趣。
職業生涯與成就
Linux 核心
1991年: 在赫爾辛基大學的學習期間，Linus 開始編寫一個新的操作系統內核，這就是後來的 Linux 核心。
1991年8月25日: 他在 comp.os.minix 郵件列表中宣布了這個項目，並邀請其他開發者參與。
1994年: 發布了第一個穩定版本的 Linux 核心（版本 1.0），這個開源項目迅速得到了全球開發者的支持和貢獻。
後續發展: Linux 核心成為了眾多操作系統（如 Ubuntu、Debian、Fedora 等）的基礎，廣泛應用於服務器、桌面電腦和嵌入式系統中。
Git&lt;/p&gt;
&lt;p&gt;2005年: 由於 BitKeeper 的免費使用政策改變，Linus 開始著手開發一個新的版本控制系統，Git。
2005年4月7日: Git 的首次提交。
2005年4月29日: Git 被用來管理 Linux 核心的開發，迅速成為開源社區和商業軟件開發中的主要工具。
其他貢獻
Subsurface: Linus Torvalds 也是一個用於記錄和計劃潛水的開源軟件 Subsurface 的開發者。
Tux: 他設計了 Linux 的吉祥物，一隻名叫 Tux 的企鵝。
獎項與榮譽&lt;/p&gt;
&lt;p&gt;1998年: EFF Pioneer Award。
2000年: Lovelace Medal。
2008年: ACM 計算機先鋒獎（ACM Software System Award）。
2012年: Millenium Technology Prize（與 Shinya Yamanaka 共同獲得）。
影響力&lt;/p&gt;
&lt;p&gt;Linus Torvalds 被廣泛認為是開源軟件運動的先驅之一。他的工作不僅影響了操作系統和版本控制系統的發展，也推動了開源社區的成長和技術創新。Linux 核心和 Git 現在都是全球數百萬開發者的日常工具，對技術世界產生了深遠的影響。&lt;/p&gt;
&lt;p&gt;個人生活&lt;/p&gt;
&lt;p&gt;Linus 目前定居於美國，已婚並有三個女兒。他的個人興趣包括潛水和旅行。&lt;/p&gt;
&lt;p&gt;Linus Torvalds 的職業生涯展示了個人對技術的熱情如何能夠轉化為對整個行業和社會的重大貢獻。無論是 Linux 還是 Git，這些工具都深刻地改變了我們開發和使用軟件的方式。&lt;/p&gt;</content><category term="w6"></category><category term="網誌編寫"></category></entry><entry><title>2024 W5課程整理</title><link href="./2024-Spring-w5-blog-tutorial.html" rel="alternate"></link><published>2024-03-22T11:00:00+08:00</published><updated>2024-06-15T19:36:43+08:00</updated><author><name>41223140</name></author><id>tag:None,2024-03-22:./2024-Spring-w5-blog-tutorial.html</id><summary type="html"></summary><content type="html">&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;事先預習上課可能會講解內容，了解iframe是什麼和相關應用。&lt;/p&gt;
&lt;p&gt;內容會以iframe來插入前幾周的教學影片，並摘要各影片內容。&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Replit分組平台倉儲設定。&lt;/h1&gt;
&lt;h1&gt;使用可攜檔裡的Putty-solvespace.exe(STL)，零件檢視方法。&lt;/h1&gt;
&lt;h1&gt;使用近端可攜程式，維護更新自己及分組倉儲。&lt;/h1&gt;
&lt;p&gt;參考實作教學影片請到youtube&lt;/p&gt;</content><category term="w5"></category><category term="網誌編寫"></category></entry><entry><title>2024 W4課程整理</title><link href="./2024-Spring-w4-blog-tutorial.html" rel="alternate"></link><published>2024-03-14T11:00:00+08:00</published><updated>2024-06-15T19:14:43+08:00</updated><author><name>41223140</name></author><id>tag:None,2024-03-14:./2024-Spring-w4-blog-tutorial.html</id><summary type="html">&lt;p&gt;有關Replit、LaTeX、Git的資料整理&lt;/p&gt;
</summary><content type="html">&lt;p&gt;有關Replit、LaTeX、Git的資料整理&lt;/p&gt;


&lt;h1&gt;Replit 靜態網站檢視&lt;/h1&gt;
&lt;p&gt;需下載 main2.txt 與 static.txt, 其中包含 main2.py 與 static.py, 只要在 Shell 執行 python3 main2.py 就可以執行倉儲內的靜態網站檢視. 另一方面, 若要取消先前執行 python3 main2.py, 只需要在 Shell 頁面按下 ctrl + c, c 代表 cancle 也就是取消. 然後若要執行動態網站，可以在 Shell 執行 python3 main.py 或者使用 Replit 的 Run 按鍵.&lt;/p&gt;
&lt;h1&gt;LaTeX&lt;/h1&gt;
&lt;p&gt;期中與期末的報告需要利用LaTeX, 需要下載 http://229.cycu.org/miktex-portable.7z &lt;/p&gt;
&lt;h1&gt;利用分組倉儲整理資料&lt;/h1&gt;
&lt;p&gt;https://github.com/git-guides&lt;/p&gt;
&lt;p&gt;https://docs.github.com/en/get-started/start-your-journey/git-and-github-learning-resources&lt;/p&gt;
&lt;p&gt;A Tutorial for Github&lt;/p&gt;
&lt;p&gt;https://git-scm.com/book/zh-tw/v2 (繁體中文, 僅翻譯至第六章)&lt;/p&gt;
&lt;p&gt;https://git-scm.com/book/zh/v2 (簡體中文)&lt;/p&gt;
&lt;p&gt;將以上資料整理至分組網站&lt;/p&gt;</content><category term="w4"></category><category term="網誌編寫"></category></entry><entry><title>2024 W3課程整理</title><link href="./2024-Spring-w3-blog-tutorial.html" rel="alternate"></link><published>2024-03-08T11:00:00+08:00</published><updated>2024-06-15T19:21:25+08:00</updated><author><name>41223140</name></author><id>tag:None,2024-03-08:./2024-Spring-w3-blog-tutorial.html</id><summary type="html">&lt;p&gt;Wink建立、git指令、Codespaces&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Wink建立、git指令、Codespaces&lt;/p&gt;


&lt;h1&gt;利用 Wink 建立影片&lt;/h1&gt;
&lt;h1&gt;關於git常用指令。&lt;/h1&gt;
&lt;p&gt;git add . (新增)&lt;/p&gt;
&lt;p&gt;git commit -m "內容" (提交及名稱)&lt;/p&gt;
&lt;p&gt;git push (推送)&lt;/p&gt;
&lt;p&gt;git version (查詢目前所使用的 git 版本)&lt;/p&gt;
&lt;p&gt;git status (一般是用來檢查目前近端改版情況)&lt;/p&gt;
&lt;p&gt;若在遠端倉儲已經改版了，就必須先git pull，將遠端資訊與自己的合併更新，才能在提交新的版本推送至倉儲。&lt;/p&gt;
&lt;p&gt;git pull=git fetch + git merge&lt;/p&gt;
&lt;p&gt;git fetch (將遠端主機的最新內容拉到本地)，git merge (用於從指定的commit合併到當前分支)&lt;/p&gt;
&lt;p&gt;git submodule add 自己倉儲網址.git+學號 (新增分組倉儲的子模組)&lt;/p&gt;
&lt;p&gt;如果只要取下倉儲主要內容，可以使用git clone (取一個git倉儲)克隆一份git倉儲，可能該子模組還有其他子模組，就必須加上--recurse-submodules&lt;/p&gt;
&lt;p&gt;git clone --recurse-submodules (.git 指定目錄與否)&lt;/p&gt;
&lt;h1&gt;利用 Github Codespaces 維護倉儲&lt;/h1&gt;
&lt;p&gt;git status&lt;/p&gt;
&lt;p&gt;ls -l&lt;/p&gt;
&lt;p&gt;clear&lt;/p&gt;
&lt;p&gt;git submodule add 自己倉儲網址.git空格+學號&lt;/p&gt;
&lt;p&gt;git add .&lt;/p&gt;
&lt;p&gt;git commit -m "add 學號 submodule"&lt;/p&gt;
&lt;p&gt;git push&lt;/p&gt;
&lt;p&gt;以上是Codespaces上比較常用到的指令&lt;/p&gt;
&lt;h1&gt;說明如何使用replit維護網站。&lt;/h1&gt;</content><category term="w3"></category><category term="網誌編寫"></category></entry><entry><title>2024 Spring 課程</title><link href="./2024-Spring-w1-blog-tutorial.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-15T13:42:03+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./2024-Spring-w1-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;內容管理系統&lt;/h1&gt;
&lt;p&gt;使用者可以自行利用 &lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; 倉儲作為 Template, 建立自己的網站內容管理系統.&lt;/p&gt;
&lt;p&gt;引用網站網址連結的方法:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 在文章中多次引用同一個網站連結時, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;https://github.com/mdecycu/cmsimde_site&lt;/a&gt; - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 也可以使用 Markdown 的標準網站連結使用格式.&lt;/p&gt;
&lt;pre class="brush: python"&gt;
# 引用 Python 程式的方法
for i in range(10):
    print(i, "列出字串")
&lt;/pre&gt;

&lt;p&gt;也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼.&lt;/p&gt;
&lt;p&gt;從 1 累加到 100:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100"&gt;1 add to 100&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;將 iterable 與 iterator &lt;a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438"&gt;相關說明&lt;/a&gt;, 利用 Brython 與 Ace Editor 整理在這個頁面.&lt;/p&gt;
&lt;!-- 導入 brython 程式庫 --&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;p&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 FileSaver 與 filereader --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/FileSaver.min.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/filereader.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 ace --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/ace.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/ext-language_tools.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/mode-python3.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/snippets/python.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 --&gt;
&lt;script src="./../cmsimde/static/Cango-24v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/gearUtils-09.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/SVGpathUtils-6v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/sylvester.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/PrairieDraw.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/javascript"&gt;
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 結束--&gt;&lt;/p&gt;
&lt;!-- editor1 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor1" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run1"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console1"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console1"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd1"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console1"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div1"&gt;&lt;/div&gt;
&lt;!-- editor1 結束 --&gt;
&lt;hr/&gt;&lt;!-- ########################################## --&gt;&lt;p&gt;從 1 累加到 100 part2:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100part2"&gt;1 add to 100&lt;/button&gt;&lt;button id="cango_three_gears"&gt;cango_three_gears&lt;/button&gt;&lt;button id="bsnake"&gt;BSnake&lt;/button&gt;&lt;button id="aitetris"&gt;AI Tetris&lt;/button&gt;&lt;button id="threejsblock"&gt;Rotating Block&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 結束--&gt;&lt;/p&gt;
&lt;!-- editor2 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor2" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename2" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run2"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console2"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console2"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd2"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console2"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div2"&gt;&lt;/div&gt;
&lt;!-- editor2 結束 --&gt;
&lt;hr/&gt;&lt;p&gt;
&lt;script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"&gt;&lt;/script&gt;</content><category term="w1"></category><category term="網誌編寫"></category></entry></feed>