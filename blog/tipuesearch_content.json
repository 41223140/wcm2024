{"pages":[{"title":"About","text":"cmsimde 內容管理系統 倉儲: https://github.com/41223140/wcm2024 網站: https://41223140.github.io/wcm2024/ 簡報: https://41223140.github.io/wcm2024/reveal 網誌: https://41223140.github.io/wcm2024/blog","tags":"misc","url":"./pages/about/"},{"title":"2024 W8課程整理","text":"從教育的本質看課程內容、如何將影片嵌入網頁 教育本質 如何將影片嵌入進自己網站","tags":"w8","url":"./2024-Spring-w8-blog-tutorial.html"},{"title":"2024 W6課程整理","text":"透過與 ChatGPT 的對話,了解有關 git 在不同專業領域的應用方法. 詢問ChatGPT有關Git 歷史與希望解決的問題 問題:Git的發展歷史 起源與創建 (2005) 背景: Linus Torvalds 在使用 BitKeeper（另一個版本控制系統）多年後，由於 BitKeeper 改變了其免費使用政策，Linux 社區決定開發自己的工具。 目標: Torvalds 設定了四個主要目標：速度、簡單的設計、對非線性開發（成千上萬的並行分支）的強大支持，以及分佈式運行的能力。 2005年4月: Linus Torvalds 開始著手開發 Git。 2005年4月7日: Git 的首次提交。 2005年4月29日: Git 被用來管理 Linux 核心的開發。 早期發展 (2005-2007) 2005年6月: Git 0.99 發布，開始為更多用戶所接受。 2005年12月: Git 1.0 發布。 2006年: Junio Hamano 成為 Git 的主要維護者。他的貢獻和持續的改進使 Git 更加穩定和強大。 2007年: GitHub 啟動，成為 Git 的一個託管平台，極大地促進了 Git 的普及。 成長與普及 (2008-2014) 2008年: Git 1.5.0 發布，改進了用戶界面並添加了許多新功能。 2009年: Git 1.6.0 發布，進一步優化了性能和功能。 2010年: 隨著 GitHub 和 Bitbucket 等平台的流行，Git 在開源社區和商業領域的應用日益增多。 2012年: Git 1.7.10 發布，加入了許多新特性和改進。 2013年: Git 1.8.0 發布，強化了用戶體驗和性能。 2014年: Git 2.0.0 發布，進一步鞏固了其在版本控制系統中的地位。 持續發展 (2015-至今) 2015年: Git 2.5.0 發布，添加了許多現代化功能。 2016年: Git 2.9.0 發布，持續改進了分支管理和性能。 2018年: Git 2.19.0 發布，引入了新的底層性能改進。 2020年: Git 2.27.0 發布，改進了用戶界面和安全性。 2021年: Git 2.33.0 發布，增加了許多新特性和優化。 重要里程碑 開源社區的支持: Git 由開源社區共同維護和改進，得到了廣泛的支持和貢獻。 工具和平台: 除了 GitHub 和 Bitbucket，還有 GitLab 等平台的出現，使得 Git 的使用更加便捷。 廣泛應用: 從小型開發團隊到大型企業，Git 已成為版本控制的標準。 影響和未來 分散式版本控制: Git 的成功推動了分散式版本控制系統的普及，改變了軟件開發的工作流程。 持續發展: 隨著社區的持續投入，Git 將不斷演變和改進，以適應現代開發的需求。 Git 的歷史展示了開源軟件的力量和社區合作的重要性，這些都使得 Git 成為今天最流行的版本控制系統之一。 Git創作人的相關履歷 Git 的創始人是 Linus Torvalds，他是一位著名的軟件工程師和程序員，以創建 Linux 操作系統核心（Linux kernel）而聞名。以下是 Linus Torvalds 的詳細履歷： 早年生活與教育 出生: Linus Torvalds 於 1969 年 12 月 28 日出生於芬蘭赫爾辛基。 家庭背景: Torvalds 家族中有許多成員都是記者和作家，父親是 Nils Torvalds，母親是 Anna Torvalds。 教育: Linus 就讀於赫爾辛基大學，主修計算機科學。他在學習期間對操作系統和編程語言產生了濃厚的興趣。 職業生涯與成就 Linux 核心 1991年: 在赫爾辛基大學的學習期間，Linus 開始編寫一個新的操作系統內核，這就是後來的 Linux 核心。 1991年8月25日: 他在 comp.os.minix 郵件列表中宣布了這個項目，並邀請其他開發者參與。 1994年: 發布了第一個穩定版本的 Linux 核心（版本 1.0），這個開源項目迅速得到了全球開發者的支持和貢獻。 後續發展: Linux 核心成為了眾多操作系統（如 Ubuntu、Debian、Fedora 等）的基礎，廣泛應用於服務器、桌面電腦和嵌入式系統中。 Git 2005年: 由於 BitKeeper 的免費使用政策改變，Linus 開始著手開發一個新的版本控制系統，Git。 2005年4月7日: Git 的首次提交。 2005年4月29日: Git 被用來管理 Linux 核心的開發，迅速成為開源社區和商業軟件開發中的主要工具。 其他貢獻 Subsurface: Linus Torvalds 也是一個用於記錄和計劃潛水的開源軟件 Subsurface 的開發者。 Tux: 他設計了 Linux 的吉祥物，一隻名叫 Tux 的企鵝。 獎項與榮譽 1998年: EFF Pioneer Award。 2000年: Lovelace Medal。 2008年: ACM 計算機先鋒獎（ACM Software System Award）。 2012年: Millenium Technology Prize（與 Shinya Yamanaka 共同獲得）。 影響力 Linus Torvalds 被廣泛認為是開源軟件運動的先驅之一。他的工作不僅影響了操作系統和版本控制系統的發展，也推動了開源社區的成長和技術創新。Linux 核心和 Git 現在都是全球數百萬開發者的日常工具，對技術世界產生了深遠的影響。 個人生活 Linus 目前定居於美國，已婚並有三個女兒。他的個人興趣包括潛水和旅行。 Linus Torvalds 的職業生涯展示了個人對技術的熱情如何能夠轉化為對整個行業和社會的重大貢獻。無論是 Linux 還是 Git，這些工具都深刻地改變了我們開發和使用軟件的方式。","tags":"w6","url":"./2024-Spring-w6-blog-tutorial.html"},{"title":"2024 W5課程整理","text":"事先預習上課可能會講解內容，了解iframe是什麼和相關應用。 內容會以iframe來插入前幾周的教學影片，並摘要各影片內容。 Replit分組平台倉儲設定。 使用可攜檔裡的Putty-solvespace.exe(STL)，零件檢視方法。 使用近端可攜程式，維護更新自己及分組倉儲。 參考實作教學影片請到youtube","tags":"w5","url":"./2024-Spring-w5-blog-tutorial.html"},{"title":"2024 W4課程整理","text":"有關Replit、LaTeX、Git的資料整理 Replit 靜態網站檢視 需下載 main2.txt 與 static.txt, 其中包含 main2.py 與 static.py, 只要在 Shell 執行 python3 main2.py 就可以執行倉儲內的靜態網站檢視. 另一方面, 若要取消先前執行 python3 main2.py, 只需要在 Shell 頁面按下 ctrl + c, c 代表 cancle 也就是取消. 然後若要執行動態網站，可以在 Shell 執行 python3 main.py 或者使用 Replit 的 Run 按鍵. LaTeX 期中與期末的報告需要利用LaTeX, 需要下載 http://229.cycu.org/miktex-portable.7z 利用分組倉儲整理資料 https://github.com/git-guides https://docs.github.com/en/get-started/start-your-journey/git-and-github-learning-resources A Tutorial for Github https://git-scm.com/book/zh-tw/v2 (繁體中文, 僅翻譯至第六章) https://git-scm.com/book/zh/v2 (簡體中文) 將以上資料整理至分組網站","tags":"w4","url":"./2024-Spring-w4-blog-tutorial.html"},{"title":"2024 W3課程整理","text":"Wink建立、git指令、Codespaces 利用 Wink 建立影片 關於git常用指令。 git add . (新增) git commit -m \"內容\" (提交及名稱) git push (推送) git version (查詢目前所使用的 git 版本) git status (一般是用來檢查目前近端改版情況) 若在遠端倉儲已經改版了，就必須先git pull，將遠端資訊與自己的合併更新，才能在提交新的版本推送至倉儲。 git pull=git fetch + git merge git fetch (將遠端主機的最新內容拉到本地)，git merge (用於從指定的commit合併到當前分支) git submodule add 自己倉儲網址.git+學號 (新增分組倉儲的子模組) 如果只要取下倉儲主要內容，可以使用git clone (取一個git倉儲)克隆一份git倉儲，可能該子模組還有其他子模組，就必須加上--recurse-submodules git clone --recurse-submodules (.git 指定目錄與否) 利用 Github Codespaces 維護倉儲 git status ls -l clear git submodule add 自己倉儲網址.git空格+學號 git add . git commit -m \"add 學號 submodule\" git push 以上是Codespaces上比較常用到的指令 說明如何使用replit維護網站。","tags":"w3","url":"./2024-Spring-w3-blog-tutorial.html"},{"title":"2024 Spring 課程","text":"2024 Spring 網際內容管理與協同產品設計實習課程教學導引. 內容管理系統 使用者可以自行利用 cmsimde_site 倉儲作為 Template, 建立自己的網站內容管理系統. 引用網站網址連結的方法: cmsimde_site - 在文章中多次引用同一個網站連結時, 可以使用此種方法. https://github.com/mdecycu/cmsimde_site - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法. cmsimde_site - 也可以使用 Markdown 的標準網站連結使用格式. # 引用 Python 程式的方法 for i in range(10): print(i, \"列出字串\") 也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼. 從 1 累加到 100: 1 add to 100 將 iterable 與 iterator 相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. Filename: .py Run Output 清除輸出區 清除繪圖區 Reload 從 1 累加到 100 part2: 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block Filename: .py Run Output 清除輸出區 清除繪圖區 Reload","tags":"w1","url":"./2024-Spring-w1-blog-tutorial.html"}]}